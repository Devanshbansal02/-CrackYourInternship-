class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> v;
        int n=s.length();
        recursion(s, 0, 1, n, v, ans);
        return ans;
    }
    void recursion(string& s, int beg, int len, int n, vector<string> curr, vector<vector<string>>& res){
        if(beg==n){
            res.push_back(curr);
            return;
        }
        if((beg+len)>n) return;
        recursion(s,beg, len+1, n, curr, res);
        if(isPallindrome(s.substr(beg,len))){
            curr.push_back(s.substr(beg, len));
            recursion(s, beg+len, 1, n, curr, res);
        }
    }
    bool isPallindrome(string s){
        int beg=0, end=s.size()-1;
        while(beg<end){
            if(s[beg]!=s[end]) return false;
            beg++;
            end--;
        }
        return true;
    }
};
