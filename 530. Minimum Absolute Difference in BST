/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        if(root==NULL) return 0;
        vector<int> inOrder;
        inorderTraversal(root, inOrder);
        int n=inOrder.size(), minm=INT_MAX;
        for(int i=1; i<n; i++){
            minm=min(minm,(inOrder[i]-inOrder[i-1]));
        }
        return minm;
    }
    void inorderTraversal(TreeNode* root,vector<int>& inOrder) {
        if(root==NULL) return;
        stack<TreeNode*> st;
        TreeNode* node=root;
        while(true){
            if(node!=NULL){
                st.push(node);
                node=node->left;
            }
            else{
                if(st.empty()==true) break;
                node=st.top();
                st.pop();
                inOrder.push_back(node->val);
                node=node->right;
            }
        }
    }
};
