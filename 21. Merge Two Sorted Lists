/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        ListNode* mover1=list1;
        ListNode* mover2=list2;
        ListNode* dummy=new ListNode(0);
        ListNode* head;
        if(mover1->val<=mover2->val) {
            head=new ListNode(mover1->val);
            mover1=mover1->next;
        }
        else {
            head=new ListNode(mover2->val);
            mover2=mover2->next;
        }
        dummy->next=head;
        while(mover1!=NULL && mover2!=NULL){
            if(mover1->val<=mover2->val) {
                ListNode* temp=new ListNode(mover1->val);
                head->next=temp;
                head=head->next;
                mover1=mover1->next;
            }
            else {
                ListNode* temp=new ListNode(mover2->val);
                head->next=temp;
                head=head->next;
                mover2=mover2->next;
            }
        }
        while(mover1!=NULL){
            ListNode* temp=new ListNode(mover1->val);
            head->next=temp;
            head=head->next;
            mover1=mover1->next;
        }
        while(mover2!=NULL){
            ListNode* temp=new ListNode(mover2->val);
            head->next=temp;
            head=head->next;
            mover2=mover2->next;
        }
        return dummy->next;
    }
};
